{"version":3,"file":"HTMLTextStyle.js","sources":["../src/HTMLTextStyle.ts"],"sourcesContent":["import { settings, utils } from '@pixi/core';\nimport { TextStyle, TextStyleFontStyle, TextStyleFontWeight, TextStyleLineJoin } from '@pixi/text';\n\nimport type { ITextStyle, TextStyleTextBaseline } from '@pixi/text';\n\n// HTMLText support more white-space options\ntype HTMLTextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line' | 'nowrap' | 'pre-wrap';\n\n// Subset of ITextStyle\ntype ITextStyleIgnore = 'whiteSpace'\n| 'fillGradientStops'\n| 'fillGradientType'\n| 'miterLimit'\n| 'textBaseline'\n| 'trim'\n| 'leading'\n| 'lineJoin';\n\n/**\n * Modifed versions from ITextStyle.\n * @extends ITextStyle\n */\ninterface IHTMLTextStyle extends Omit<ITextStyle, ITextStyleIgnore>\n{\n    /**\n     * White-space with expanded options\n     * @type {'normal'|'pre'|'pre-line'|'nowrap'|'pre-wrap'}\n     */\n    whiteSpace: HTMLTextStyleWhiteSpace;\n}\n\n/**\n * Font information for HTMLText\n */\ninterface IHTMLFont\n{\n    /** User-supplied URL request */\n    originalUrl: string;\n    /** Base64 string for font */\n    dataSrc: string;\n    /** FontFace installed in the document */\n    fontFace: FontFace | null;\n    /** Blob-based URL for font */\n    src: string;\n    /** Family name of font */\n    family: string;\n    /** Weight of the font */\n    weight: TextStyleFontWeight;\n    /** Style of the font */\n    style: TextStyleFontStyle;\n    /** Reference counter */\n    refs: number;\n}\n\n/**\n * Used internally to restrict text style usage and convert easily to CSS.\n * @class\n * @extends PIXI.TextStyle\n * @see {@link https://pixijs.download/dev/docs/PIXI.TextStyle.html PIXI.TextStyle}\n * @param {PIXI.ITextStyle|IHTMLTextStyle} [style] - Style to copy.\n */\nclass HTMLTextStyle extends TextStyle\n{\n    /** The collection of installed fonts */\n    public static availableFonts: Record<string, IHTMLFont> = {};\n\n    /**\n     * List of default options, these are largely the same as TextStyle,\n     * with the exception of whiteSpace, which is set to 'normal' by default.\n     */\n    public static readonly defaultOptions: IHTMLTextStyle = {\n        /** Align */\n        align: 'left',\n        /** Break words */\n        breakWords: false,\n        /** Drop shadow */\n        dropShadow: false,\n        /** Drop shadow alpha */\n        dropShadowAlpha: 1,\n        /**\n         * Drop shadow angle\n         * @type {number}\n         * @default Math.PI / 6\n         */\n        dropShadowAngle: Math.PI / 6,\n        /** Drop shadow blur */\n        dropShadowBlur: 0,\n        /** Drop shadow color */\n        dropShadowColor: 'black',\n        /** Drop shadow distance */\n        dropShadowDistance: 5,\n        /** Fill */\n        fill: 'black',\n        /** Font family */\n        fontFamily: 'Arial',\n        /** Font size */\n        fontSize: 26,\n        /** Font style */\n        fontStyle: 'normal',\n        /** Font variant */\n        fontVariant: 'normal',\n        /** Font weight */\n        fontWeight: 'normal',\n        /** Letter spacing */\n        letterSpacing: 0,\n        /** Line height */\n        lineHeight: 0,\n        /** Padding */\n        padding: 0,\n        /** Stroke */\n        stroke: 'black',\n        /** Stroke thickness */\n        strokeThickness: 0,\n        /** White space */\n        whiteSpace: 'normal',\n        /** Word wrap */\n        wordWrap: false,\n        /** Word wrap width */\n        wordWrapWidth: 100,\n    };\n\n    /** For using custom fonts */\n    private _fonts: IHTMLFont[] = [];\n\n    /** List of internal style rules */\n    private _overrides: string[] = [];\n\n    /** Global rules or stylesheet, useful for creating rules for rendering */\n    private _stylesheet = '';\n\n    /** Track font changes internally */\n    private fontsDirty = false;\n\n    /**\n     * Convert a TextStyle to HTMLTextStyle\n     * @example\n     * import {TextStyle } from 'pixi.js';\n     * import {HTMLTextStyle} from '@pixi/text-html';\n     * const style = new TextStyle();\n     * const htmlStyle = HTMLTextStyle.from(style);\n     */\n    static from(originalStyle: TextStyle | Partial<IHTMLTextStyle>): HTMLTextStyle\n    {\n        return new HTMLTextStyle(Object.keys(HTMLTextStyle.defaultOptions)\n            .reduce((obj, prop) => ({ ...obj, [prop]: originalStyle[prop as keyof IHTMLTextStyle] }), {})\n        );\n    }\n\n    /** Clear the current font */\n    public cleanFonts(): void\n    {\n        if (this._fonts.length > 0)\n        {\n            this._fonts.forEach((font) =>\n            {\n                URL.revokeObjectURL(font.src);\n                font.refs--;\n                if (font.refs === 0)\n                {\n                    if (font.fontFace)\n                    {\n                        document.fonts.delete(font.fontFace);\n                    }\n                    delete HTMLTextStyle.availableFonts[font.originalUrl];\n                }\n            });\n            this.fontFamily = 'Arial';\n            this._fonts.length = 0;\n            this.styleID++;\n            this.fontsDirty = true;\n        }\n    }\n\n    /** Because of how HTMLText renders, fonts need to be imported */\n    public loadFont(url: string, options: Partial<Pick<IHTMLFont, 'weight' | 'style' | 'family'>> = {}): Promise<void>\n    {\n        const { availableFonts } = HTMLTextStyle;\n\n        // Font is already installed\n        if (availableFonts[url])\n        {\n            const font = availableFonts[url];\n\n            this._fonts.push(font);\n            font.refs++;\n            this.styleID++;\n            this.fontsDirty = true;\n\n            return Promise.resolve();\n        }\n\n        return settings.ADAPTER.fetch(url)\n            .then((response) => response.blob())\n            .then(async (blob) => new Promise<[string, string]>((resolve, reject) =>\n            {\n                const src = URL.createObjectURL(blob);\n                const reader = new FileReader();\n\n                reader.onload = () => resolve([src, reader.result as string]);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            }))\n            .then(async ([src, dataSrc]) =>\n            {\n                const font: IHTMLFont = Object.assign({\n                    family: utils.path.basename(url, utils.path.extname(url)),\n                    weight: 'normal',\n                    style: 'normal',\n                    src,\n                    dataSrc,\n                    refs: 1,\n                    originalUrl: url,\n                    fontFace: null,\n                }, options);\n\n                availableFonts[url] = font;\n                this._fonts.push(font);\n                this.styleID++;\n\n                // Load it into the current DOM so we can properly measure it!\n                const fontFace = new FontFace(font.family, `url(${font.src})`, {\n                    weight: font.weight,\n                    style: font.style,\n                });\n\n                // Keep this reference so we can remove it later from document\n                font.fontFace = fontFace;\n\n                await fontFace.load();\n                document.fonts.add(fontFace);\n                await document.fonts.ready;\n\n                this.styleID++;\n                this.fontsDirty = true;\n            });\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this._overrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this._overrides.push(...toAdd);\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this._overrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this._overrides = this._overrides.filter((v) => !toRemove.includes(v));\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Internally converts all of the style properties into CSS equivalents.\n     * @return The CSS style string, for setting `style` property of root HTMLElement.\n     */\n    public toCSS(scale: number): string\n    {\n        return [\n            'display: inline-block',\n            `color: ${this.normalizeColor(this.fill)}`,\n            `font-size: ${(this.fontSize as number) * scale}px`,\n            `font-family: ${this.fontFamily}`,\n            `font-weight: ${this.fontWeight}`,\n            `font-style: ${this.fontStyle}`,\n            `font-variant: ${this.fontVariant}`,\n            `letter-spacing: ${this.letterSpacing * scale}px`,\n            `text-align: ${this.align}`,\n            `padding: ${this.padding * scale}px`,\n            `white-space: ${this.whiteSpace}`,\n            ...this.lineHeight ? [`line-height: ${this.lineHeight * scale}px`] : [],\n            ...this.wordWrap ? [\n                `word-wrap: ${this.breakWords ? 'break-all' : 'break-word'}`,\n                `max-width: ${this.wordWrapWidth * scale}px`\n            ] : [],\n            ...this.strokeThickness ? [\n                `-webkit-text-stroke-width: ${this.strokeThickness * scale}px`,\n                `-webkit-text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                `text-stroke-width: ${this.strokeThickness * scale}px`,\n                `text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                'paint-order: stroke',\n            ] : [],\n            ...this.dropShadow ? [this.dropShadowToCSS(scale)] : [],\n            ...this._overrides,\n        ].join(';');\n    }\n\n    /** Get the font CSS styles from the loaded font, If available. */\n    public toGlobalCSS(): string\n    {\n        return this._fonts.reduce((result, font) => (\n            `${result}\n            @font-face {\n                font-family: \"${font.family}\";\n                src: url('${font.dataSrc}');\n                font-weight: ${font.weight};\n                font-style: ${font.style}; \n            }`\n        ), this._stylesheet);\n    }\n\n    /** Internal stylesheet contents, useful for creating rules for rendering */\n    public get stylesheet(): string\n    {\n        return this._stylesheet;\n    }\n    public set stylesheet(value: string)\n    {\n        if (this._stylesheet !== value)\n        {\n            this._stylesheet = value;\n            this.styleID++;\n        }\n    }\n\n    /** Convert numerical colors into hex-strings */\n    private normalizeColor(color: any): string\n    {\n        if (Array.isArray(color))\n        {\n            color = utils.rgb2hex(color);\n        }\n\n        if (typeof color === 'number')\n        {\n            return utils.hex2string(color);\n        }\n\n        return color;\n    }\n\n    /** Convert the internal drop-shadow settings to CSS text-shadow */\n    private dropShadowToCSS(scale: number): string\n    {\n        let color = this.normalizeColor(this.dropShadowColor);\n        const alpha = this.dropShadowAlpha;\n        const x = Math.round(Math.cos(this.dropShadowAngle) * this.dropShadowDistance);\n        const y = Math.round(Math.sin(this.dropShadowAngle) * this.dropShadowDistance);\n\n        // Append alpha to color\n        if (color.startsWith('#') && alpha < 1)\n        {\n            color += (alpha * 255 | 0).toString(16).padStart(2, '0');\n        }\n\n        const position = `${x * scale}px ${y * scale}px`;\n\n        if (this.dropShadowBlur > 0)\n        {\n            return `text-shadow: ${position} ${this.dropShadowBlur}px ${color}`;\n        }\n\n        return `text-shadow: ${position} ${color}`;\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        Object.assign(this, HTMLTextStyle.defaultOptions);\n    }\n\n    /**\n     * Called after the image is loaded but before drawing to the canvas.\n     * Mostly used to handle Safari's font loading bug.\n     * @ignore\n     */\n    public onBeforeDraw()\n    {\n        const { fontsDirty: prevFontsDirty } = this;\n\n        this.fontsDirty = false;\n\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (this.isSafari && this._fonts.length > 0 && prevFontsDirty)\n        {\n            return new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Proving that Safari is the new IE\n     * @ignore\n     */\n    private get isSafari(): boolean\n    {\n        const { userAgent } = settings.ADAPTER.getNavigator();\n\n        return (/^((?!chrome|android).)*safari/i).test(userAgent);\n    }\n\n    /** @ignore fillGradientStops is not supported by HTMLText */\n    override set fillGradientStops(_value: number[])\n    {\n        console.warn('[HTMLTextStyle] fillGradientStops is not supported by HTMLText');\n    }\n    override get fillGradientStops()\n    {\n        return super.fillGradientStops;\n    }\n\n    /** @ignore fillGradientType is not supported by HTMLText */\n    override set fillGradientType(_value: number)\n    {\n        console.warn('[HTMLTextStyle] fillGradientType is not supported by HTMLText');\n    }\n    override get fillGradientType()\n    {\n        return super.fillGradientType;\n    }\n\n    /** @ignore miterLimit is not supported by HTMLText */\n    override set miterLimit(_value: number)\n    {\n        console.warn('[HTMLTextStyle] miterLimit is not supported by HTMLText');\n    }\n    override get miterLimit()\n    {\n        return super.miterLimit;\n    }\n\n    /** @ignore trim is not supported by HTMLText */\n    override set trim(_value: boolean)\n    {\n        console.warn('[HTMLTextStyle] trim is not supported by HTMLText');\n    }\n    override get trim()\n    {\n        return super.trim;\n    }\n\n    /** @ignore textBaseline is not supported by HTMLText */\n    override set textBaseline(_value: TextStyleTextBaseline)\n    {\n        console.warn('[HTMLTextStyle] textBaseline is not supported by HTMLText');\n    }\n    override get textBaseline()\n    {\n        return super.textBaseline;\n    }\n\n    /** @ignore leading is not supported by HTMLText */\n    override set leading(_value: number)\n    {\n        console.warn('[HTMLTextStyle] leading is not supported by HTMLText');\n    }\n    override get leading()\n    {\n        return super.leading;\n    }\n\n    /** @ignore lineJoin is not supported by HTMLText */\n    override set lineJoin(_value: TextStyleLineJoin)\n    {\n        console.warn('[HTMLTextStyle] lineJoin is not supported by HTMLText');\n    }\n    override get lineJoin()\n    {\n        return super.lineJoin;\n    }\n}\n\nexport { HTMLTextStyle };\nexport type { IHTMLTextStyle, HTMLTextStyleWhiteSpace };\n"],"names":["TextStyle","settings","utils"],"mappings":"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"}